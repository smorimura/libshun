%% language=Japanese
%% encoding=UTF-8
%% end of line=LF
%% 本テキストファイルはそのままでも読めるよう工夫されていますが，拙作btxconvを用いることで，HTMLやLaTeXなどのさまざまなフォーマットに変換することができ，より美しい表示結果が得られます。

タイトル：libshun - 俊の私的C言語関数ライブラリ　取扱説明書
サブタイトル：Version 1.0.2
著者：森村 俊
日付：2023年11月28日
目次：作成

■これは何？
本文の著者である私（森村）が，個人の趣味でプログラミングをするときに簡単に活用できるように構築したC言語の関数ライブラリです。
各種のアプリケーションプログラムを開発する際に作ったさまざまな関数の中から，比較的独立した機能を持つものをまとめて整理しただけのものですので，ほとんど単機能関数の寄せ集めに過ぎません。
しかしながら，十徳ナイフのようにいざという時に「あってよかった」と思える便利なライブラリを目指しています。

■対応システム
当初の開発はWindows 10上のBorland C++ 5.5.1で行っていました。
現在はLinux Mint上で行っています。
標準ANSI C（C89）の範囲内の機能しか使用していませんので，多くのシステムで利用可能なはずです。
可能な限りMS-DOS上でも利用できるよう，ポータビリティには気をつけています。
MS-DOS上ではLSI C-86 3.30c試食版でコンパイル可能です。

■配布ファイル
本ライブラリで配布するのは，以下のファイルです。

・README.btx：このファイル
・history.txt：変更履歴
・Makefile：Unix系OS用メイクファイル
・Makefile.bcc：Borland C++ 5.5.1用メイクファイル
・Makefile.lcc：LSI C-86 3.30c試食版用メイクファイル
・libshun.rsp：Borland C++ 5.5.1用レスポンスファイル
・libshun.lst：LSI C-86 3.30c試食版用リストファイル
・libshun.h：共通ヘッダファイル
・*.c：Cソースファイル

■インストール方法
■■文字コードについて
このREADME.btxやhistory.txtの文字コードはUTF-8を使っていますが，その他のCソースファイル，ヘッダファイル，およびメイクファイル等については現在のところいわゆるASCII文字のみで記述され，さらに文字コードに依存するような機能は基本的に実装していません。
したがって，他の環境でもそのままコンパイル可能なはずです。
ただし改行コードはLFからシステムに合わせて変換する必要があるかもしれません。
ちなみにタブ幅は4で見やすいように記述しています。

■■Unix系OSの場合
最初にMakefileを修正する必要があります。
CCやCFLAGS，ARやARFLAGSなどを環境に合わせて修正してください。
デフォルトではCコンパイラをcc，ライブラリアンをarと仮定しています。
CFLAGSの指定にはgccに対するオプションを指定しています。
また，本ライブラリは個人用ということで，デフォルトではシステム全体にインストールされるのではなく，各自のホームディレクトリ下にインストールされるようになっています。
ライブラリファイルは~/lib/libshun.aとして，ヘッダファイルは~/include/libshun.hとして作成されますので，変更したい場合は適宜修正してください。

修正したら以下のようにmakeコマンドを起動して，ライブラリファイルを作成します。
＝＝
$ make
＝＝

エラーがなければライブラリファイルlibshun.aができているはずです。
これをインストールする場合は，以下のように行います。
＝＝
$ make install
＝＝

もしここでインストール先ディレクトリが存在しない場合はうまくインストールできませんので，ライブラリファイルとヘッダファイルが格納されるディレクトリは，あらかじめ作成しておいてください。
また，アップデート時など，インストール先にすでに同名のファイルが存在していた場合は，上書きするかどうかを尋ねられます。

インストールが終了したら，カレントディレクトリに生成されたオブジェクトファイルやライブラリファイルは不要です。
以下のコマンドできれいに削除されます。
＝＝
$ make clean
＝＝

■■Windowsの場合（Borland C++ 5.5.1）
Borland C++に付属のmakeコマンドを用いることを仮定します。
まずはMakefile.bccファイルの内容を環境に合わせて修正してください。
基本的にはデフォルトのままで問題ないはずです。
ただしユーザー自身のホームディレクトリを環境変数HOMEに設定しておいてください。
インストールに伴い，ライブラリファイルはlibshun.libとして，LIB_DIRで指定されたディレクトリに作成されます。
ヘッダファイルlibshun.hはINC_DIRで指定されたディレクトリにコピーされます。

Cソースファイルからライブラリファイルを作成するには，以下のコマンドを実行します。
＝＝
> make -f Makefile.bcc
＝＝

無事にコンパイルとライブラリ作成が終了したら，カレントディレクトリにlibshun.libができているはずです。
これをシステムにインストールするには，以下のコマンドを実行してください。
＝＝
> make -f Makefile.bcc install
＝＝

ここで，Makefile.bcc内のLIB_DIRとINC_DIRで指定されたディレクトリは，あらかじめ作成しておいてください。
また，アップデート時など，インストール先にすでに同名のファイルが存在していた場合は，上書きするかどうかを尋ねられます。

インストールが終わったらコンパイル中に作成された余計なファイルは削除して構いません。
次のコマンドで簡単に実行できます。
＝＝
> make -f Makefile.bcc clean
＝＝

■■MS-DOSの場合（LSI C-86 3.30c試食版）
LSI C-86 3.30c試食版に付属のmakeコマンドを用いることを仮定します。
まずはMakefile.lccファイルの内容を環境に合わせて修正してください。
基本的にはデフォルトのままで問題ないはずです。
ただしユーザー自身のホームディレクトリを環境変数HOMEに設定しておいてください。
インストールに伴い，ライブラリファイルはlibshun.libとして，LIB_DIRで指定されたディレクトリに作成されます。
ヘッダファイルlibshun.hはINC_DIRで指定されたディレクトリにコピーされます。

Cソースファイルからライブラリファイルを作成するには，以下のコマンドを実行します。
＝＝
> make -f Makefile.lcc
＝＝

無事にコンパイルとライブラリ作成が終了したら，カレントディレクトリにlibshun.libができているはずです。
これをシステムにインストールするには，以下のコマンドを実行してください。
＝＝
> make -f Makefile.lcc install
＝＝

ここで，Makefile.lcc内のLIB_DIRとINC_DIRで指定されたディレクトリは，あらかじめ作成しておいてください。
また，アップデート時など，インストール先にすでに同名のファイルが存在していた場合は，上書きするかどうかを尋ねられます。

インストールが終わったらコンパイル中に作成された余計なファイルは削除して構いません。
次のコマンドで簡単に実行できます。
＝＝
> make -f Makefile.lcc clean
＝＝

■アンインストール方法
本ライブラリをインストールすると，共通ヘッダファイルlibshun.hとライブラリファイルlibshun.aやlibshun.libなどが各環境のメイクファイルで指定されたディレクトリにコピーされるだけです。
したがって，アンインストールはこれらのファイルを単に削除するだけです。

■本ライブラリの使い方
■■Unix系OSの場合
本ライブラリに含まれる関数等の機能を利用したい場合は，まずはそのソースファイルに以下のような記述を追加して，共通ヘッダファイルを読み込む指定を行います。
通常はソースファイルの冒頭部分に記載します。
＝＝
#include <libshun.h>
＝＝

次にコンパイル方法について説明します。
例として，foo.cおよびbar.cから，実行形式bazを作成するものとします。
このとき，コンパイラ（およびリンカ）にヘッダファイルとライブラリファイルの場所の指定，およびライブラリファイルとのリンク指定を行う必要があります。
これは例えば以下のように行います。
＝＝
$ cc -I~/include -L~/lib -o baz foo.c bar.c -lshun
＝＝

ライブラリファイルlibshun.aとのリンク指定は，'-lshun'としてコマンドラインの最後で行います。
これにより各種シンボルの解決が最終的に成功します。

■■Windowsの場合（Borland C++ 5.5.1）
本ライブラリに含まれる関数等の機能を利用したい場合は，まずはそのソースファイルに以下のような記述を追加して，共通ヘッダファイルを読み込む指定を行います。
通常はソースファイルの冒頭部分に記載します。
＝＝
#include <libshun.h>
＝＝

コンパイルの例として，foo.cおよびbar.cから，実行形式baz.exeを作成する場合のコマンドを以下に示します。
＝＝
C:\>bcc32 -I%HOME%\include -L%HOME%\lib -ebaz.exe foo.c bar.c libshun.lib
＝＝

%HOME%は環境変数HOMEで指定されたユーザー自身のホームディレクトリを指します。
libshun.libはライブラリファイルで，通常はコマンドラインの最後に記述します。

■■MS-DOSの場合（LSI C-86 3.30c試食版）
本ライブラリに含まれる関数等の機能を利用したい場合は，まずはそのソースファイルに以下のような記述を追加して，共通ヘッダファイルを読み込む指定を行います。
通常はソースファイルの冒頭部分に記載します。
＝＝
#include <libshun.h>
＝＝

コンパイルの例として，foo.cおよびbar.cから，実行形式baz.exeを作成する場合のコマンドを以下に示します。
＝＝
C:\>lcc -I%HOME%\include -L%HOME%\lib -o baz.exe foo.c bar.c -llibshun
＝＝

%HOME%は環境変数HOMEで指定されたユーザー自身のホームディレクトリを指します。
-llibshunはライブラリファイルの指定で，通常はコマンドラインの最後に記述します。

■ライブラリリファレンス
■■独自の変数型
■■■真偽型
@@SH_bool @latex SH\_bool
古いC言語には真偽型がありませんので，独自に作ってみました。
共通ヘッダファイルlibshun.h内で，以下の定義を行っています。
＝＝
typedef enum {
	FALSE,
	TRUE
} SH_bool;
＝＝

これにより，例えば以下のようにTRUEとFALSEしか値を取ることのできない真偽型変数resultを定義できます。
＝＝
SH_bool result = TRUE;
＝＝

TRUEとFALSEは整数型の1と0に等価です。
注意しなければならないのは，if文でTRUEと比較する場合です。
例えば以下のコードは文法的には正しくても，思ったような結果が得られない可能性があります。
＝＝
if (valid(value) == TRUE) {
	...
}
＝＝

ここで関数validの戻り値が0以外のときに真と期待すると，困ったことになります。
TRUE（=1）と比較することで，戻り値が1以外の場合はすべて偽となります。

これを避けるためには，以下のように書くべきです。
＝＝
if (valid(value) != FALSE) {
	...
}
＝＝

または，以下のような記述の方が分かりやすいかもしれません。
＝＝
if (valid(value)) {
	...
}
＝＝

したがって，真偽値を返す関数はできるだけ'is'で始まる名前を付けるとよいでしょう。
以下のように読みやすくなります。
＝＝
if (is_valid(value)) {
	...
}
＝＝

本ライブラリに含まれる真偽値を返す関数には，可能な限り
@@'SH_Is' @latex 'SH\_Is'
で始まる名前を付けてあります。

■■プリプロセッサマクロ
■■■シフトJIS文字コード判別コマンド
@@SH_IsSjisKanji @latex SH\_IsSjisKanji
引数に与えられた文字がシフトJISコードの1バイト目かどうかを判別します。
次のように使えます。
＝＝
if (SH_IsSjisKanji(string[i])) {
	i += 2;		/* ポインタを漢字1文字分進める */
}
＝＝

■■関数リファレンス
@@■■■SH_IsPrefix @latex ■■■SH\_IsPrefix

【プロトタイプ宣言】

＝＝
SH_bool SH_IsPrefix(const char *prefix, const char *buffer);
＝＝

【機能】

文字列バッファbufferの先頭部分に特別な文字列prefixが存在しているかをチェックする。
行頭に制御文字列が書かれているかどうかを判定することなどに使える。

【戻り値】

文字列バッファbufferの先頭部分がプレフィックス文字列prefixに一致していたらTRUE，そうでなければFALSEを返す。

@@■■■SH_IsFile @latex ■■■SH\_IsFile

【プロトタイプ宣言】

＝＝
SH_bool SH_IsFile(const char *filename);
＝＝

【機能】

文字列filenameをファイル名とするファイルの存在をチェックする。

【戻り値】

指定されたファイルを読み取り専用としてオープンを試み，成功したらTRUE，失敗したらFALSEを返す。
そのため，実際にはファイルは存在していてもアクセス権がない場合はオープンできないため，FALSEを返されることに注意。
また，関数内でファイルがオープンされても自動的にクローズされるので，ファイルの内容を読み取る場合は別途オープン処理が必要。

@@■■■SH_GetComParameter @latex ■■■SH\_GetComParameter

【プロトタイプ宣言】

＝＝
char SH_GetComParameter(const char *com_param, char *com_opt_arg, const char *special_opt_letters);
＝＝

【機能】

argv[i]のような形で与えられるコマンドパラメータ文字列
@@com_param @latex com\_param
を順次解析し，オプション文字またはオプション引数を得る。
もし得られたオプション文字が文字列
@@special_opt_letters @latex special\_opt\_letters
に含まれるもの（特殊オプション文字）であれば，さらに次の文字列をオプション引数として
@@com_opt_arg @latex com\_opt\_arg
に得る。

詳しい動作は以下の「詳細」を参照のこと。

【戻り値】

与えられたコマンドパラメータが'-'だけだった場合はエラー終了する。
与えられたコマンドパラメータが'-'で始まり，かつ直後に文字が存在する場合（コマンドオプションだった場合），その文字（オプション文字）を返す。
もし得られたオプション文字が特殊オプション文字の1つだった場合，関数の戻り値としてそのオプション文字を返し，さらに
@@com_opt_arg @latex com\_opt\_arg
にオプション引数が格納される。
ここでもしオプション引数が
@@COM_OPT_ARG_SIZE @latex COM\_OPT\_ARG\_SIZE
バイト以上だった場合はエラー終了する。
与えられたコマンドパラメータが'-'で始まらない文字列だった場合（コマンド引数だった場合），戻り値として
@@'\0' @latex \verb|'\0'|
を返す。

【詳細】

ここでは本関数によってコマンドラインを解析する動作の詳細について述べる。

コマンドの起動に際し，シェルからmain関数の引数（argv[][]）に与えられる一連の文字列（の配列）をコマンドライン文字列と呼ぶ。
コマンドライン文字列は，その先頭にコマンド名，引き続いて任意個のコマンドパラメータが続く。
本関数では，コマンドパラメータ列はコマンドオプション列とコマンド引数列が，この順序で現れると仮定している。
＝＝
$ コマンド名 [任意個のコマンドオプション] [任意個のコマンド引数]
＝＝

コマンドオプションは'-'で始まり，次に英数字または記号1文字からなるオプション文字が続く。
大文字小文字は区別される。
例えば'-h'や'-H'，'-5'，'-?'などは正しいコマンドオプションである。

コマンドオプションとして複数の文字をまとめて指定することはできない。
すなわち，'-a'と'-b'を一緒に指定しようとして'-ab'とすることは認められない。
また，'-'だけの指定はエラーとなる。
'-'の代わりに'/'を使うこともできない。

正式なコマンドオプションが与えられれば，本関数は戻り値としてそのオプション文字を返す。
もしこのオプション文字が特殊オプション文字の配列として指定された
@@special_opt_letters @latex special\_opt\_letters
に含まれるものであれば，さらに引数（オプション引数）をとることができる。

すなわち，
@@special_opt_letters @latex special\_opt\_letters
が"Dt"と指定されていた場合は，'-DDEBUG'や'-t100'などと指定することができる。
このとき，オプション文字とオプション引数の間に空白を入れてはならない。
オプション引数は関数の呼び出し側で用意した文字列バッファ
@@com_opt_arg @latex com\_opt\_arg
にコピーされる。
これは
@@COM_OPT_ARG_SIZE @latex COM\_OPT\_ARG\_SIZE
の大きさ（libshun.hで指定され，デフォルトで256バイト）で確保すること。
これよりも長いオプション引数が与えられた場合はエラーとなる。

もし与えられたコマンドパラメータ
@@com_param @latex com\_param
が'-'で始まらない場合は，コマンド引数が与えられたとし，関数の戻り値として
@@'\0' @latex \verb|'\0'|
を返す。
したがって，呼び出し側はその文字列をコマンドに与えられた入力ファイル名などとして処理することができる。

以下は本関数の利用例である。
＝＝
#include <stdio.h>
#include <libshun.h>

int main(int argc, char *argv[])
{
	int i;
	char com_opt_arg[COM_OPT_ARG_SIZE];

	for (i = 1; i < argc; ++i) {
		switch (SH_GetComParameter(argv[i], com_opt_arg, "Dt")) {
		case 'h':
			puts("-h is specified.");
			break;
		case 'v':
			puts("-v is specified.");
			break;
		case 'D':
			puts("-D is specified.");
			printf("the option argument is '%s'.\n", com_opt_arg);
			break;
		case '\0':
			puts("command argument is specified.");
			printf("the argument is '%s'.\n", argv[i]);
			break;
		default:
			printf("unknown option '%c' is specified.\n", argv[i][1]);
			break;
		}
	}

	return(0);
}
＝＝

@@■■■SH_ErrorExit @latex ■■■SH\_ErrorExit

【プロトタイプ宣言】

＝＝
int SH_ErrorExit(const char *fmt, ...);
＝＝

【機能】

printf系関数の引数形式で指定されたエラーメッセージを標準エラー出力に出力し，OSに
@@EXIT_FAILURE @latex EXIT\_FAILURE
を渡してプログラムを終了する。

【戻り値】

本関数は実行するとOSに
@@EXIT_FAILURE @latex EXIT\_FAILURE
を渡してプログラム自体を終了させる。

@@■■■SH_CutNewLineByte @latex ■■■SH\_CutNewLineByte

【プロトタイプ宣言】

＝＝
char *SH_CutNewLineByte(char *line);
＝＝

【機能】

文字列lineの末尾（
@@'\0' @latex \verb|'\0'|
の直前）に改行文字（
@@'\n' @latex \verb|'\n'|
）があれば，これを
@@'\0' @latex \verb|'\0'|
でつぶす。
fgets関数で得られた文字列から改行文字を取り除くことなどに利用できる。
lineが直接書き換えられることに注意。
また，lineの長さを求めるために，内部でstrlen関数を利用している。
そのため，lineは必ず
@@'\0' @latex \verb|'\0'|
で終端されていることをユーザーが責任を持って保証すること。

【戻り値】

書き換えられた後のlineを返す。

@@■■SH_GetLabelAndDescription @latex ■■■SH\_GetLabelAndDescription

【プロトタイプ宣言】

＝＝
int SH_GetLabelAndDescription(const char *line, const char *start_mark, const char *end_mark, char *label, char *description);
＝＝

【機能】

文字列lineに対し，行頭の
@@start_mark @latex start\_mark
から
@@end_mark @latex end\_mark
に挟まれた文字列を切り出してlabelへ，
@@end_mark @latex end\_mark
から後ろをdescriptionに入れる。
これは例えば「【ラベル】記述」などのような行から「ラベル」と「記述」を切り出す用途に用いる。
ここで
@@start_mark @latex start\_mark
は"【"，
@@end_mark @latex end\_mark
は"】"である。
labelとdescriptionの長さは呼び出し側が管理すること。

【戻り値】

成功すれば0を返す。
文字列lineの先頭に
@@start_mark @latex start\_mark
がなかったら1を返し，labelは""に，descriptionはlineがそのまま入る。
文字列lineに
@@end_mark @latex end\_mark
がなかったら2を返し，labelには
@@start_mark @latex start\_mark
の直後からlineの最後までが入る。
このときdescriptionは""となる。

@@■■■SH_ExpandTabToSpaces @latex ■■■SH\_ExpandTabToSpaces

【プロトタイプ宣言】

＝＝
char *SH_ExpandTabToSpaces(int tab_width, const char *line, char *buffer);
＝＝

【機能】

タブ幅を
@@tab_width @latex tab\_width
とし，文字列line中のタブ文字をスペースで展開する。
展開した文字列をbufferに格納する。
bufferには十分な大きさの領域を確保すること。

また，この関数では単純にバイト単位で文字数を数えており，文字の幅などは考えていない。
シフトJISのように漢字（いわゆる全角文字）1文字が2バイトで，ANK文字（いわゆる半角文字）の2倍の幅で表示されるような状況では問題ないと思われるが，UTF-8エンコーディングなどでは漢字1文字が3バイトの場合もあり，同じ結果とはならない。
近年はプロポーショナルフォントの利用も一般的であり，タブ文字をスペースで展開するということ自体にあまり重要な意味を持たせてはいけないのかもしれない。

【戻り値】

展開後の文字列bufferを返す。

@@■■■SH_GetCommandPath @latex ■■■SH\_GetCommandPath

【プロトタイプ宣言】

＝＝
char *SH_GetCommandPath(const char *argv0, char *com_path);
＝＝

【機能】

コマンドの起動パスのような文字列argv0から，コマンドを除いた部分をcom_pathに格納する。
Unix系OSでは，例えば以下のような文字列が得られる。
・"btxconv"→""
・"./btxconv"→"./"
・"/home/user/bin/btxconv"→"/home/user/bin/"

DOSやWindowsでは以下のようになる。

・"btxconv"→""
・"A:\BIN\BTXCONV.EXE"→"A:\BIN\"
・"B:BTXCONV.EXE"→"B:"

具体的には，文字列argv0の後ろから/または
@@\ @latex \\
を検索し，/が先に見つかればUnix系OSと仮定，
@@\ @latex \\が先に見つかればDOSまたはWindowsと仮定している。
/と
@@\ @latex \\のどちらも存在しなかった場合，さらに:を検索し，存在したらDOSまたはWindowsとしている。

【戻り値】

文字列com_pathを返す。

@@■■■SH_StringCopy @latex ■■■SH\_StringCopy

【プロトタイプ宣言】

＝＝
char *SH_StringCopy(char *dst, const char *src, size_t size);
＝＝

【機能】

文字列srcの先頭sizeバイトをバッファdstにコピーする。
コピーされた文字列の最後（size + 1バイト目，つまりdst[size]）には'\0'が付加される。
したがってdstは少なくともsize + 1バイトのサイズが必要である。

C89にはstrcpy関数があるが，バッファオーバーフローの危険性があるため使うべきではない。
指定したバイト数だけをコピーするstrncpy関数があるが，こちらは文字列の最後に'\0'を自動的には付加しないため，コピー後にその文字列を参照する場合に問題が生じる可能性がある。
本関数はコピー先のバッファの最後に自動的に'\0'を付加する。

【戻り値】

コピーされた文字列dstを返す。

■ライセンス
本プログラムはフリーソフトウェアです。
どのような保証もないかわりに，本プログラムについて私は一切の著作権を主張しません。
日本国内の法律と常識の範囲内に限り，どのように利用されても構いません。

■連絡先
ご意見・ご質問等がございましたら，以下の連絡先へメールでお知らせください。
プログラムの改良に関するアイディアなどは大いに歓迎です。

【氏名】森村 俊
【メールアドレス】shun.morimura@live.jp

－＞
以上
－＞

